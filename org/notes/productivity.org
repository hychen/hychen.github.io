#+TITLE: 生產力
#+OPTIONS: H:1
#+HTML_LINK_HOME: ../index.html
#+HTML_LINK_UP: ../index.html
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="/blog/css/readtheorg.css" />

* Remapping Keyboard Keys On Mac
** Gloal
1. Remaps capslock to Ctrl.
2. Remaps casplock to Escape.
** Why
1. I am a fan of *Emacs* but prefer *VIM style editing* (which leads me to start using spacemacs), 
   I'll use *Ctrl* and *Escape* very very often. 
2. The default layout of Mac keyboard does not work very well to me.
3. Capslock is useless, I never use it. Luckly, it seems a good place to put *Ctrl/Escape* there.
** Remaps Capslock To Ctrl
1. Go into the Keyboard preference pane. 
2. Click "Modifier Keys…", and change Caps Lock to Control.
3. Download the lastest version of [[https://pqrs.org/osx/karabiner/seil.html.en][Seli]].
4. Open Seli and go *other keys* section to Change *Ctrl_L*
** Remaps Capslock to Escape
1. Download the lastest version of [[https://pqrs.org/osx/karabiner/][Karabiner]].
2. go into Karabiner and search for this option:
#+BEGIN_VERSE
Control_L to Control_L
      (+ when you type Control_L only, send Escape)
#+END_VERSE
* Tiling Window Management On MAC
I missed xmonad such much and can not find a good replacement on mac. 
Amyethyst is good but still not perfect to meet all my need.
** Installation 
#+BEGIN_SRC shell
brew cask install amyethyst
#+END_SRC
** Remaps modifier combinations
- mod1 :: option + shift + control + command (hypher)
- mod2 :: option

#+BEGIN_SRC javascript :tangle ~/.amethyst
{
    "LAYOUTS": "----------------------",
    "layouts": [
        "tall",
        "wide",
        "fullscreen",
        "column"
    ],

    "MODIFIERS": "----------------------",
    "Valid modifiers are": [
        "option",
        "shift",
        "control",
        "command"
    ],

    "mod1": [
        "option",
        "shift",
        "control",
        "command"
    ],
    "mod1": [
        "option",
        "shift",
        "control"
    ],

    "COMMANDS": "----------------------",
    "Commands are": {
        "cycle-layout": "Cycle layout to the next layout",
        "focus-screen-1": "Focus the main window on the first screen",
        "focus-screen-2": "Focus the main window on the second screen",
        "focus-screen-3": "Focus the main window on the third screen",
        "throw-screen-1": "Throw the focused window to the first screen",
        "throw-screen-2": "Throw the focused window to the second screen",
        "throw-screen-3": "Throw the focused window to the third screen",
        "shrink-main": "Shrink the main pane of the current layout",
        "expand-main": "Expand the main pane of the current layout",
        "increase-main": "Increase the number of windows in the main pane",
        "decrease-main": "Decrease the number of windows in the main pane",
        "focus-ccw": "Move window focus counter-clockwise on the current screen",
        "focus-cw": "Move window focus clockwise on the current screen",
        "swap-ccw": "Swap focused window with the next window going counter-clockwise",
        "swap-cw": "Swap focused window with the next window going clockwise",
        "swap-main": "Swap focused window with the main window of its screen",
        "throw-space-1": "Throw the focused window to the first space",
        "throw-space-2": "Throw the focused window to the second space",
        "throw-space-3": "Throw the focused window to the third space",
        "throw-space-4": "Throw the focused window to the fourth space",
        "throw-space-5": "Throw the focused window to the fifth space",
        "throw-space-6": "Throw the focused window to the sixth space",
        "throw-space-7": "Throw the focused window to the seventh space",
        "throw-space-8": "Throw the focused window to the eighth space",
        "throw-space-9": "Throw the focused window to the ninth space",
        "toggle-float": "Toggle the focused window between being floating and tiled"
    },

    "cycle-layout": {
        "mod": "mod1",
        "key": "space"
    },
    "select-tall-layout": {
        "mod": "mod1",
        "key": "a"
    },
    "select-wide-layout": {
        "mod": "mod1",
        "key": "s"
    },
    "select-fullscreen-layout": {
        "mod": "mod1",
        "key": "d"
    },
    "select-column-layout": {
        "mod": "mod1",
        "key": "f"
    },
    "focus-screen-1": {
        "mod": "mod1",
        "key": "w"
    },
    "focus-screen-2": {
        "mod": "mod1",
        "key": "e"
    },
    "focus-screen-3": {
        "mod": "mod1",
        "key": "r"
    },
    "throw-screen-1": {
        "mod": "mod1",
        "key": "w"
    },
    "throw-screen-2": {
        "mod": "mod1",
        "key": "e"
    },
    "throw-screen-3": {
        "mod": "mod1",
        "key": "r"
    },
    "shrink-main": {
        "mod": "mod1",
        "key": "h"
    },
    "expand-main": {
        "mod": "mod1",
        "key": "l"
    },
    "increase-main": {
        "mod": "mod1",
        "key": ","
    },
    "decrease-main": {
        "mod": "mod1",
        "key": "."
    },
    "focus-ccw": {
        "mod": "mod1",
        "key": "j"
    },
    "focus-cw": {
        "mod": "mod1",
        "key": "k"
    },
    "swap-ccw": {
        "mod": "mod1",
        "key": "j"
    },
    "swap-cw": {
        "mod": "mod1",
        "key": "k"
    },
    "swap-main": {
        "mod": "mod1",
        "key": "enter"
    },
    "throw-space-1": {
        "mod": "mod1",
        "key": "1"
    },
    "throw-space-2": {
        "mod": "mod1",
        "key": "2"
    },
    "throw-space-3": {
        "mod": "mod1",
        "key": "3"
    },
    "throw-space-4": {
        "mod": "mod1",
        "key": "4"
    },
    "throw-space-5": {
        "mod": "mod1",
        "key": "5"
    },
    "throw-space-6": {
        "mod": "mod1",
        "key": "6"
    },
    "throw-space-7": {
        "mod": "mod1",
        "key": "7"
    },
    "throw-space-8": {
        "mod": "mod1",
        "key": "8"
    },
    "throw-space-9": {
        "mod": "mod1",
        "key": "9"
    },
    "toggle-float": {
        "mod": "mod1",
        "key": "t"
    },
    "toggle-tiling": {
        "mod": "mod1",
        "key": "t"
    },
    "display-current-layout": {
        "mod": "mod1",
        "key": "i"
    },

    "MISC": "----------------------",
    "floating": [],
    "float-small-windows": true,
    "mouse-follows-focus": false
}
#+END_SRC

* Zsh Configuration 
I switched to zsh from bash a while, oh-my-zsh is first framwork I used. 
It is handy and well documented, but what did not stastify me is its slow startup times,
Antigen shares same issue with oh-my-zsh, finally I tried zplug and very happy with its speed and 
flexibility - To be able use plugins of oh-my-zsh and have better response time.

This configuration is specified for Mac users only because I moved to Mac from Linux since 2013.
** Installation
#+BEGIN_SRC sh
brew install zsh
git clone https://github.com/b4b4r07/zplug ~/.zplug
chsh -s /usr/local/bin/zsh
#+END_SRC
** Initialization
#+BEGIN_SRC sh :tangle ~/.zshrc
source ~/.zplug/zplug
#+END_SRC
** Command Search PATH
#+BEGIN_SRC sh :tangle ~/.zshrc
export PATH=${HOME}/bin:${HOME}/.local/bin:/usr/local/bin:${PATH}
#+END_SRC
** Default Editor
#+BEGIN_SRC sh :tangle ~/.zshrc
export EDITOR=vim
#+END_SRC
** VIM mode
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug "plugins/vi-mode", from:oh-my-zsh
#+END_SRC
** Theme 
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug "themes/pygmalion", from:oh-my-zsh
#+END_SRC
** Syntax Highlight
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug "zsh-users/zsh-syntax-highlighting", nice:10
#+END_SRC
** History Search
 Type in any part of any previously entered command and press the UP and DOWN arrow keys to cycle 
 through the matching commands. You can also use K and J in VI mode or ^P and ^N in EMACS mode for the same.
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug "zsh-users/zsh-history-substring-search"
#+END_SRC
*** Bind UP and DOWN arrow keys
#+BEGIN_SRC sh :tangle ~/.zshrc
zmodload zsh/terminfo
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down
#+END_SRC
*** Bind P and N for EMACS mode
#+BEGIN_SRC sh :tangle ~/.zshrc
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down
#+END_SRC
*** Bind k and j for VI mode
#+BEGIN_SRC sh :tangle ~/.zshrc
bindkey -M vicmd 'k' history-substring-search-up
#+END_SRC
** Git
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug "plugins/git", from:oh-my-zsh
#+END_SRC
** OSX Enhancement
- brew auto completion.
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug "plugins/brew", from:oh-my-zsh
#+END_SRC
** NodeJS Development Env
*** NPM auto completion 
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug "plugins/npm", from:oh-my-zsh
#+END_SRC
*** NVM setup
#+BEGIN_SRC sh :tangle ~/.zshrc
export NVM_DIR=~/.nvm
source $(brew --prefix nvm)/nvm.sh
#+END_SRC
** Install plugins automatically
zplug check return true if all plugins are installed
Therefore, when it returns not true (thus false),
run zplug install
#+BEGIN_SRC sh :tangle ~/.zshrc
if ! zplug check; then
    zplug install
fi
#+END_SRC
** Loads Zplug Plugins.
# source and add to the PATH
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug load --verbose
#+END_SRC
** Aliases & Additonal Commands
*** List all branchs in tig by default.
#+BEGIN_SRC sh :tangle ~/.zshrc
which tig >/dev/null     && alias tig=tig --all
#+END_SRC
*** Searches files with names containing a string
f: searches the current directory subtree for files with names containing a
string (ignoring case). f png would find all PNG files in the current subtree,
as well as “PNGisMyFavorite.txt” and so forth.
#+BEGIN_SRC sh :tangle ~/.zshrc
function f() { find . -iname "*$1*" ${@:2} }
#+END_SRC
*** Greps the current directory subtree for files matching a pattern.
r: recursively greps the current directory subtree for files matching a pattern.
r HTTP would grep for files containing that exact string, while r '"http[^"]*"'
  -i would search for double-quoted strings starting with “http”, ignoring case.
#+BEGIN_SRC sh :tangle ~/.zshrc
function r() { grep "$1" ${@:2} -R . }
#+END_SRC
** Put it all together
#+INCLUDE: "~/.zshrc" src sh
* VIM Configuration
Normally I use Emacs to write codes and documents, but sometimes 
I  do quick modification on terminal by using VIM. 
** Syntax Highlight
#+BEGIN_SRC shell :tangle ~/.vimrc
syntax on
#+END_SRC
** Highlight and strip eatra white spaces
Highlight existing trailing whitespace and also strip trailing 
whitespace.
 #+BEGIN_SRC shell :tangle ~/.vimrc
 highlight ExtraWhitespace ctermbg=red guibg=red
 match ExtraWhitespace /\s\+$/
 autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
 autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
 autocmd InsertLeave * match ExtraWhitespace /\s\+$/
 autocmd BufWinLeave * call clearmatches()
 #+END_SRC
** Put it all together 
#+INCLUDE: ~/.vimrc src sh
* Git Configuration
Git is a widely used source code management system.
** Workflow
When I start to develop something, my workflow always looks like:

1. run *git fetch*, *git rebase* to get other people's changes.
2. do some experimients. 
3. run *git save* to save current codebase, so I can go back if I screw up my code later.
4. do some experimients. 
5. run *git wipe* if I don't like the result and want to throw current modifications to the hell.
6. do some experimients.
7. run *git save*.
8. do some experimients.
9. run *git undo*, if I want to commit some changes.
10. run *git save*.
11. run *git r* to re-organize my commit logs.
12. run *git push* to deliver my works or save on cloud.
** Installation 
#+BEGIN_SRC shell
brew install git
#+END_SRC
** Set up my name and e-mail address
both of which are included in every commit i make.
#+BEGIN_SRC shell :tangle ~/.gitconfig
[user]
	name = 陳信屹
	email = ossug.hychen@gmail.com
#+END_SRC 
** Caching password in git
Cloning Github repositories using HTTPS is better than using SSH when you want to access those repositories 
in multiple deivces. The only annoy thing is you need to type password everytime and this caches your GitHub 
password in Git.
#+BEGIN_SRC shell :tangle ~/.gitconfig
[credential]
	helper = osxkeychain
#+END_SRC
** Change git push behavior to simple
When pushing without giving a refspec, push the current branch to its remote branch.
#+BEGIN_SRC shell :tangle ~/.gitconfig
[push]
	default = simple
#+END_SRC
** Disable advices which isnt useful anymore
It was useful when i was a beginer, but now it is annoy to me as a 老手!
- Disable the advice shown by Git when you attempt to push something that’s not fast forward-able
- Disable “how to stage/unstage/add” hints given by git status.
#+BEGIN_SRC shell :tangle ~/.gitconfig
[advice]
  pushNonFastForward = false
  statusHints = false
#+END_SRC
** Useful Aliases
This saves a lot time, and I think you should do too!.
| Alias          | Description                                                                                     |
|----------------+-------------------------------------------------------------------------------------------------|
| s              | View the current working tree status using the short format with branch information.            |
| l              | View abbreviated SHA, description, and history graph of the latest 50 commits                   |
| c              | Clone a repository including all submodules                                                     |
| ci             | Normal git commit                                                                               |
| ca             | Commit all changes                                                                              |
| co             | Normal git checkout                                                                             |
| save           | Adds all changes including untracked files and creates a commit as a savepoint.                 |
| undo           | Resets the previous commit, but keeps all the changes from that commit in the working directory |
| wipe           | Commit everything and then do hard reset.                                                       |
| r              | rebase lastest 15 commits                                                                       |
| fc             | Find commits by source coude                                                                    |
| fm             | Find commits by commit message                                                                  |
| contributors	 | List contributors with number of commits                                                        |

#+NAME: Git Config Aliases
#+BEGIN_SRC shell :tangle ~/.gitconfig
[alias]
	s = status -sb
	l = log --pretty=oneline -n 50 --graph --abbrev-commit
	c = clone --recursive
  ci = commit
	ca = !git add -A && git commit -av
  co = checkout
	save = !git add -A && git commit -v 'SAVEPOINT'
	undo = reset HEAD~1 --mixed
	wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
  r = rebase -i HEAD~15
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	contributors = shortlog --summary --numbered
#+END_SRC
** Put it all together
#+INCLUDE: ~/.gitconfig src sh
