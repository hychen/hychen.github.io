#+TITLE: 生產力
#+OPTIONS: H:1
#+HTML_LINK_HOME: ../index.html
#+HTML_LINK_UP: ../index.html
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="/blog/css/readtheorg.css" />

* Remapping Keyboard Keys On Mac
** Gloal
1. Remaps capslock to Ctrl.
2. Remaps casplock to Escape.
** Why
1. I am a fan of *Emacs* but prefer *VIM style editing* (which leads me to start using spacemacs), 
   I'll use *Ctrl* and *Escape* very very often. 
2. The default layout of Mac keyboard does not work very well to me.
3. Capslock is useless, I never use it. Luckly, it seems a good place to put *Ctrl/Escape* there.
** Remaps Capslock To Ctrl
1. Go into the Keyboard preference pane. 
2. Click "Modifier Keys…", and change Caps Lock to Control.
3. Download the lastest version of [[https://pqrs.org/osx/karabiner/seil.html.en][Seli]].
4. Open Seli and go *other keys* section to Change *Ctrl_L*
** Remaps Capslock to Escape
1. Download the lastest version of [[https://pqrs.org/osx/karabiner/][Karabiner]].
2. go into Karabiner and search for this option:
#+BEGIN_VERSE
Control_L to Control_L
      (+ when you type Control_L only, send Escape)
#+END_VERSE
* Zsh Configuration 
I switched to zsh from bash a while, oh-my-zsh is first framwork I used. 
It is handy and well documented, but what did not stastify me is its slow startup times,
Antigen shares same issue with oh-my-zsh, finally I tried zplug and very happy with its speed and 
flexibility - To be able use plugins of oh-my-zsh and have better response time.

This configuration is specified for Mac users only because I moved to Mac from Linux since 2013.
** Installation
#+BEGIN_SRC sh
brew install zsh
git clone https://github.com/b4b4r07/zplug ~/.zplug
chsh -s /usr/local/bin/zsh
#+END_SRC
** Initialization
#+BEGIN_SRC sh :tangle ~/.zshrc
source ~/.zplug/zplug
#+END_SRC
** Command Search PATH
#+BEGIN_SRC sh :tangle ~/.zshrc
export PATH=${HOME}/bin:${HOME}/.local/bin:/usr/local/bin:${PATH}
#+END_SRC
** Default Editor
#+BEGIN_SRC sh :tangle ~/.zshrc
export EDITOR=vim
#+END_SRC
** VIM mode
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug "plugins/vi-mode", from:oh-my-zsh
#+END_SRC
** Theme 
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug "themes/pygmalion", from:oh-my-zsh
#+END_SRC
** Syntax Highlight
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug "zsh-users/zsh-syntax-highlighting", nice:10
#+END_SRC
** History Search
 Type in any part of any previously entered command and press the UP and DOWN arrow keys to cycle 
 through the matching commands. You can also use K and J in VI mode or ^P and ^N in EMACS mode for the same.
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug "zsh-users/zsh-history-substring-search"
#+END_SRC
*** Bind UP and DOWN arrow keys
#+BEGIN_SRC sh :tangle ~/.zshrc
zmodload zsh/terminfo
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down
#+END_SRC
*** Bind P and N for EMACS mode
#+BEGIN_SRC sh :tangle ~/.zshrc
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down
#+END_SRC
*** Bind k and j for VI mode
#+BEGIN_SRC sh :tangle ~/.zshrc
bindkey -M vicmd 'k' history-substring-search-up
#+END_SRC
** Git
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug "plugins/git", from:oh-my-zsh
#+END_SRC
** OSX Enhancement
- brew auto completion.
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug "plugins/brew", from:oh-my-zsh
#+END_SRC
** NodeJS Development Env
*** NPM auto completion 
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug "plugins/npm", from:oh-my-zsh
#+END_SRC
*** NVM setup
#+BEGIN_SRC sh :tangle ~/.zshrc
export NVM_DIR=~/.nvm
source $(brew --prefix nvm)/nvm.sh
#+END_SRC
** Install plugins automatically
zplug check return true if all plugins are installed
Therefore, when it returns not true (thus false),
run zplug install
#+BEGIN_SRC sh :tangle ~/.zshrc
if ! zplug check; then
    zplug install
fi
#+END_SRC
** Loads Zplug Plugins.
# source and add to the PATH
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug load --verbose
#+END_SRC
** Aliases & Additonal Commands
*** List all branchs in tig by default.
#+BEGIN_SRC sh :tangle ~/.zshrc
which tig >/dev/null     && alias tig=tig --all
#+END_SRC
*** Searches files with names containing a string
f: searches the current directory subtree for files with names containing a
string (ignoring case). f png would find all PNG files in the current subtree,
as well as “PNGisMyFavorite.txt” and so forth.
#+BEGIN_SRC sh :tangle ~/.zshrc
function f() { find . -iname "*$1*" ${@:2} }
#+END_SRC
*** Greps the current directory subtree for files matching a pattern.
r: recursively greps the current directory subtree for files matching a pattern.
r HTTP would grep for files containing that exact string, while r '"http[^"]*"'
  -i would search for double-quoted strings starting with “http”, ignoring case.
#+BEGIN_SRC sh :tangle ~/.zshrc
function r() { grep "$1" ${@:2} -R . }
#+END_SRC
** Put it all together
#+INCLUDE: "~/.zshrc" src sh
* VIM Configuration
Normally I use Emacs to write codes and documents, but sometimes 
I  do quick modification on terminal by using VIM. 
** Syntax Highlight
#+BEGIN_SRC shell :tangle ~/.vimrc
syntax on
#+END_SRC
** Highlight and strip eatra white spaces
Highlight existing trailing whitespace and also strip trailing 
whitespace.
 #+BEGIN_SRC shell :tangle ~/.vimrc
 highlight ExtraWhitespace ctermbg=red guibg=red
 match ExtraWhitespace /\s\+$/
 autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
 autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
 autocmd InsertLeave * match ExtraWhitespace /\s\+$/
 autocmd BufWinLeave * call clearmatches()
 #+END_SRC
