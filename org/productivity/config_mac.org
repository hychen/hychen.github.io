#+TITLE: Work More Efficiently on a Mac
#+OPTIONS: H:1
#+HTML_LINK_UP: ./index.html

#+BEGIN_QUOTE
工欲善其事，必先利其器。
#+END_QUOTE
* Managing dotfiles in org-babel.
I used to have almost 80% configurations that I stole from other people on internet which are never 
used. Why? Maybe because I did not think why i need them, thoese things jsut did not be adopted in my daily 
workflow. 

*org-babel* is a way that you can embed your codeblock in your literatures.
I've ever saw people use it to manage their Emacs configuration many times,
and think it might be easy to manage my dotfiles also.

so, here you are, this is a post remains me why I need to theses configuration, how can I be more productivity,  
but it is also used to export all my configurations on mac.

Should you interest to see original source file, please visit [[https://raw.githubusercontent.com/hychen/hychen.github.io/master/org/productivity/config_mac.org][here]].
* Better Keyboard Configuration
** Remaps Capslock To Ctrl
I am a fan of *Emacs* but prefer *VIM style editing* (which leads me to start using spacemacs), 
Capslock is useless, I never use it. Luckly, it seems a good place to put *Ctrl/Escape* there.

1. Go into the Keyboard preference pane. 
2. Click "Modifier Keys…", and change Caps Lock to Control.
3. Download the lastest version of [[https://pqrs.org/osx/karabiner/seil.html.en][Seli]].
5. Open Seli and go *other keys* section to Change *Ctrl_L*
** Remaps Capslock to Escape

1. Download the lastest version of [[https://pqrs.org/osx/karabiner/][Karabiner]].
2. go into Karabiner and search for this option:
#+BEGIN_VERSE
Control_L to Control_L
      (+ when you type Control_L only, send Escape)
#+END_VERSE
** Remaps Ctrl-L to Hypher
To define Hyper as control+option+command+shift.
*** open Karabiner and go to Misc & Uninstall > Open private.xml). 
*** Add this XML snippet directly under the <root> element.
#+BEGIN_SRC xml
<?xml version="1.0"?>
	<item>
    <name>Remap Left Control to Hyper</name>
    <appendix>OS X doesn't have a Hyper. This maps Left Control to Control + Shift + Option + Command.</appendix>

    <identifier>space_cadet.left_control_to_hyper</identifier>

    <autogen>
        --KeyToKey--
        KeyCode::F19,

        KeyCode::COMMAND_L,
        ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L
    </autogen>
  </item>
#+END_SRC
*** Save the file, then open Karabiner and press ReloadXML in the upper-right of the Change Key tab. 
*** search for Remap Caps and check the box.
** References
- [[https://msol.io/blog/tech/work-more-efficiently-on-your-mac-for-developers/#tap-caps-lock-for-escape][Work more efficiently on your Mac (for developers)]]
- [[http://stevelosh.com/blog/2012/10/a-modern-space-cadet][A Modern Space Cadet]] 
* Get The Missing Package Manager
Do you miss *apt-get*, or any package manager on Linux after you swtiched to Mac?
If you do then *brew* and *brew cask* is what you are looking for.

TBD
* Use Tiling Window Manager
Don't organize windows by yourself, let the computer does. Have you ever aware how much times you spend 
on organzing windows? 

Most of times, what you actually need is having 2 applications that 1 is one left side and another one is on 
right side in same screen, for example, you may want to read a webpage on browser which is on left side while you are 
programming with a editor on the right side at the same time. Ideally those applications should be in proper position 
on your screen after launch.

I can't help to organize windows by my self anymore after I tried one of best tiling window managers 
on Linux - [[http://xmonad.org/][XMonad]].

It is still one killer application on Linux I can't find replacement on MAC until now, even I found Amethyst 
and it really fit some of my needs.

** Get [[https://github.com/ianyh/Amethyst][Amethyst]]
[[../../assests/imgs/amethyst.gif]]
*** Installation 
#+BEGIN_SRC shell
brew cask install amethyst
#+END_SRC
*** Enable accessibility APIs
To give permissions to use the accessibility APIs under the Privacy tab of the Security
& Privacy preferences pane 
** Setup
The default configuration of amethyst is good enought to use, but it can do better by having the 
following preferences.

- set first modifier to Hypher(which is my original left control key).
- floating smal windows.
** Usage
| Key             | Descriptions                                         |
|-----------------+------------------------------------------------------|
| Hypher + space  | cycle to next layout                                 |
| Hypher + h      | shrink the main pane                                 |
| Hypher + l      | expand the main pane                                 |
| Hypher + j      | focus the next window counterclockwise               |
| Hypher + k      | focus the next window clockwise                      |
| Hypher + return | swap the focused window with the main window         |
| Hypher + t      | toggle whether or not the focused window is floating |
* User ITerm2
TBD
* Use Quake Console
As a developer and power command line user.

TBD.
* Use Spacemacs
Spacemaacs is a community-driven Emacs distribution. 

TBD

* Use Zsh 
I switched to zsh from bash a while, oh-my-zsh is first framwork I used. 
It is handy and well documented, but what did not stastify me is its slow startup times,
Antigen shares same issue with oh-my-zsh, finally I tried zplug and very happy with its speed and 
flexibility - To be able use plugins of oh-my-zsh and have better response time.

This configuration is specified for Mac users only because I moved to Mac from Linux since 2013.
** Installation
#+BEGIN_SRC sh
brew install zsh
git clone https://github.com/b4b4r07/zplug ~/.zplug
chsh -s /usr/local/bin/zsh
#+END_SRC
** Initialization
#+BEGIN_SRC sh :tangle ~/.zshrc
source ~/.zplug/zplug
#+END_SRC
** Command Search PATH
#+BEGIN_SRC sh :tangle ~/.zshrc
export PATH=${HOME}/bin:${HOME}/.local/bin:/usr/local/bin:${PATH}
#+END_SRC
** Default Editor
#+BEGIN_SRC sh :tangle ~/.zshrc
export EDITOR=vim
#+END_SRC
** VIM mode
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug "plugins/vi-mode", from:oh-my-zsh
#+END_SRC
** Theme 
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug "themes/pygmalion", from:oh-my-zsh
#+END_SRC
** Syntax Highlight
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug "zsh-users/zsh-syntax-highlighting", nice:10
#+END_SRC
** History Search
 Type in any part of any previously entered command and press the UP and DOWN arrow keys to cycle 
 through the matching commands. You can also use K and J in VI mode or ^P and ^N in EMACS mode for the same.
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug "zsh-users/zsh-history-substring-search"
#+END_SRC
*** Bind UP and DOWN arrow keys
#+BEGIN_SRC sh :tangle ~/.zshrc
zmodload zsh/terminfo
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down
#+END_SRC
*** Bind P and N for EMACS mode
#+BEGIN_SRC sh :tangle ~/.zshrc
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down
#+END_SRC
*** Bind k and j for VI mode
#+BEGIN_SRC sh :tangle ~/.zshrc
bindkey -M vicmd 'k' history-substring-search-up
#+END_SRC
** Git
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug "plugins/git", from:oh-my-zsh
#+END_SRC
** OSX Enhancement
- brew auto completion.
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug "plugins/brew", from:oh-my-zsh
#+END_SRC
** NodeJS Development Env
*** NPM auto completion 
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug "plugins/npm", from:oh-my-zsh
#+END_SRC
*** NVM setup
#+BEGIN_SRC sh :tangle ~/.zshrc
export NVM_DIR=~/.nvm
source $(brew --prefix nvm)/nvm.sh
#+END_SRC
** Install plugins automatically
zplug check return true if all plugins are installed
Therefore, when it returns not true (thus false),
run zplug install
#+BEGIN_SRC sh :tangle ~/.zshrc
if ! zplug check; then
    zplug install
fi
#+END_SRC
** Loads Zplug Plugins.
# source and add to the PATH
#+BEGIN_SRC sh :tangle ~/.zshrc
zplug load --verbose
#+END_SRC
** Aliases & Additonal Commands
*** List all branchs in tig by default.
#+BEGIN_SRC sh :tangle ~/.zshrc
which tig >/dev/null     && alias tig=tig --all
#+END_SRC
*** Searches files with names containing a string
f: searches the current directory subtree for files with names containing a
string (ignoring case). f png would find all PNG files in the current subtree,
as well as “PNGisMyFavorite.txt” and so forth.
#+BEGIN_SRC sh :tangle ~/.zshrc
function f() { find . -iname "*$1*" ${@:2} }
#+END_SRC
*** Greps the current directory subtree for files matching a pattern.
r: recursively greps the current directory subtree for files matching a pattern.
r HTTP would grep for files containing that exact string, while r '"http[^"]*"'
  -i would search for double-quoted strings starting with “http”, ignoring case.
#+BEGIN_SRC sh :tangle ~/.zshrc
function r() { grep "$1" ${@:2} -R . }
#+END_SRC
** Put it all together
#+INCLUDE: "~/.zshrc" src sh
* Use VIM 
Normally I use Emacs to write codes and documents, but sometimes 
I  do quick modification on terminal by using VIM. 
** Syntax Highlight
#+BEGIN_SRC shell :tangle ~/.vimrc
syntax on
#+END_SRC
** Highlight and strip eatra white spaces
Highlight existing trailing whitespace and also strip trailing 
whitespace.
 #+BEGIN_SRC shell :tangle ~/.vimrc
 highlight ExtraWhitespace ctermbg=red guibg=red
 match ExtraWhitespace /\s\+$/
 autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
 autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
 autocmd InsertLeave * match ExtraWhitespace /\s\+$/
 autocmd BufWinLeave * call clearmatches()
 #+END_SRC
** Put it all together 
#+INCLUDE: ~/.vimrc src sh
* Use Git 
Git is a widely used source code management system.
** Workflow
When I start to develop something, my workflow always looks like:

1. run *git fetch*, *git rebase* to get other people's changes.
2. do some experimients. 
3. run *git save* to save current codebase, so I can go back if I screw up my code later.
4. do some experimients. 
5. run *git wipe* if I don't like the result and want to throw current modifications to the hell.
6. do some experimients.
7. run *git save*.
8. do some experimients.
9. run *git undo*, if I want to commit some changes.
10. run *git save*.
11. run *git r* to re-organize my commit logs.
12. run *git push* to deliver my works or save on cloud.
** Installation 
#+BEGIN_SRC shell
brew install git
#+END_SRC
** Set up my name and e-mail address
both of which are included in every commit i make.
#+BEGIN_SRC shell :tangle ~/.gitconfig
[user]
	name = 陳信屹
	email = ossug.hychen@gmail.com
#+END_SRC 
** Caching password in git
Cloning Github repositories using HTTPS is better than using SSH when you want to access those repositories 
in multiple deivces. The only annoy thing is you need to type password everytime and this caches your GitHub 
password in Git.
#+BEGIN_SRC shell :tangle ~/.gitconfig
[credential]
	helper = osxkeychain
#+END_SRC
** Change git push behavior to simple
When pushing without giving a refspec, push the current branch to its remote branch.
#+BEGIN_SRC shell :tangle ~/.gitconfig
[push]
	default = simple
#+END_SRC
** Disable advices which isnt useful anymore
It was useful when i was a beginer, but now it is annoy to me as a 老手!
- Disable the advice shown by Git when you attempt to push something that’s not fast forward-able
- Disable “how to stage/unstage/add” hints given by git status.
#+BEGIN_SRC shell :tangle ~/.gitconfig
[advice]
  pushNonFastForward = false
  statusHints = false
#+END_SRC
** Useful Aliases
This saves a lot time, and I think you should do too!.
| Alias          | Description                                                                                     |
|----------------+-------------------------------------------------------------------------------------------------|
| s              | View the current working tree status using the short format with branch information.            |
| l              | View abbreviated SHA, description, and history graph of the latest 50 commits                   |
| c              | Clone a repository including all submodules                                                     |
| ci             | Normal git commit                                                                               |
| ca             | Commit all changes                                                                              |
| co             | Normal git checkout                                                                             |
| p              | git push                                                                                        |
| save           | Adds all changes including untracked files and creates a commit as a savepoint.                 |
| undo           | Resets the previous commit, but keeps all the changes from that commit in the working directory |
| wipe           | Commit everything and then do hard reset.                                                       |
| r              | rebase lastest 15 commits                                                                       |
| fc             | Find commits by source coude                                                                    |
| fm             | Find commits by commit message                                                                  |
| contributors	 | List contributors with number of commits                                                        |

#+NAME: Git Config Aliases
#+BEGIN_SRC shell :tangle ~/.gitconfig
[alias]
	s = status -sb
	l = log --pretty=oneline -n 50 --graph --abbrev-commit
	c = clone --recursive
  ci = commit
	ca = !git add -A && git commit -av
  co = checkout
  p = push
	save = !git add -A && git commit -v 'SAVEPOINT'
	undo = reset HEAD~1 --mixed
	wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
  r = rebase -i HEAD~15
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	contributors = shortlog --summary --numbered
#+END_SRC
** Put it all together
#+INCLUDE: ~/.gitconfig src sh
** References
- [[http://nuclearsquid.com/writings/git-tricks-tips-workflows/][A few of my Git tricks, tips and workflows]]
